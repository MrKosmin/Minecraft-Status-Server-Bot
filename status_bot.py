```python
import asyncio
import logging
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from mcstatus import JavaServer
import json
from starlette.applications import Starlette
from starlette.requests import Request
from starlette.responses import PlainTextResponse, Response
from starlette.routing import Route
import uvicorn

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = "8274163476:AAEWiqVBsOnYl2Rp2t-Jrz-2nJMDjDKyij4"
SERVER_ADDRESS = "arm.ichtlay.cc"
SERVER_PORT = 25565
URL = os.environ.get("RENDER_EXTERNAL_URL")  # Render –Ω–∞–¥–∞—î URL —Å–µ—Ä–≤—ñ—Å—É
PORT = int(os.environ.get("PORT", 8000))  # –ü–æ—Ä—Ç —ñ–∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 8000

class MinecraftServerMonitor:
    def __init__(self, server_address: str, server_port: int = 25565):
        self.server = JavaServer(server_address, server_port)
        self.previous_players = set()
        self.monitoring_chats = set()
        self.data_file = "bot_data.json"
        self.load_data()
        
    def load_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.monitoring_chats = set(data.get('monitoring_chats', []))
                    self.previous_players = set(data.get('previous_players', []))
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
    
    def save_data(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ"""
        try:
            data = {
                'monitoring_chats': list(self.monitoring_chats),
                'previous_players': list(self.previous_players)
            }
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
    
    async def get_server_status(self):
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            status = await asyncio.to_thread(self.server.status)
            players_list = []
            if status.players.sample:
                players_list = [player.name for player in status.players.sample]
            
            return {
                'online': True,
                'players_online': status.players.online,
                'players_max': status.players.max,
                'players_list': players_list
            }
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return {'online': False, 'error': str(e)}
    
    async def check_player_changes(self, bot):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–º—ñ–Ω–∏ –≤ —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤"""
        status = await self.get_server_status()
        if not status['online']:
            return
        
        current_players = set(status['players_list'])
        
        # –ù–æ–≤—ñ –≥—Ä–∞–≤—Ü—ñ (–∑–∞–π—à–ª–∏)
        joined_players = current_players - self.previous_players
        # –ì—Ä–∞–≤—Ü—ñ, —â–æ –≤–∏–π—à–ª–∏
        left_players = self.previous_players - current_players
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏
        for chat_id in self.monitoring_chats:
            try:
                for player in joined_players:
                    message = f"üü¢ {player} –∑–∞–π—à–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    await bot.send_message(chat_id=chat_id, text=message)
                
                for player in left_players:
                    message = f"üî¥ {player} –ø–æ–∫–∏–Ω—É–≤ —Å–µ—Ä–≤–µ—Ä\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    await bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat_id}: {e}")
        
        self.previous_players = current_players
        self.save_data()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
monitor = MinecraftServerMonitor(SERVER_ADDRESS, SERVER_PORT)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    chat_id = update.effective_chat.id
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É
    monitor.monitoring_chats.add(chat_id)
    monitor.save_data()
    
    message = await get_status_message()
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–û–Ω–æ–≤–∏—Ç–∏", callback_data='update_status')]])
    
    await update.message.reply_text(message, reply_markup=keyboard)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'update_status':
        message = await get_status_message()
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–û–Ω–æ–≤–∏—Ç–∏", callback_data='update_status')]])
        
        await query.edit_message_text(text=message, reply_markup=keyboard)

async def get_status_message():
    """–ì–µ–Ω–µ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º —É –≤–∫–∞–∑–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ"""
    status = await monitor.get_server_status()
    update_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    ip = f"{SERVER_ADDRESS}"
    online_status = "üü¢ –û–Ω–ª–∞–π–Ω" if status['online'] else "üî¥ –û—Ñ–ª–∞–π–Ω"
    players = f"–ì—Ä–∞–≤—Ü—ñ–≤: {status.get('players_online', 0)}\\{status.get('players_max', 0)}" if status['online'] else "–ì—Ä–∞–≤—Ü—ñ–≤: N/A"
    
    nicknames = ""
    if status['online'] and status['players_list']:
        nicknames = "\n| ‚Äî " + "\n| ‚Äî ".join(status['players_list'])
    elif status['online']:
        nicknames = "\n| ‚Äî –ù–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤ –æ–Ω–ª–∞–π–Ω"
    else:
        nicknames = "\n| ‚Äî –°–µ—Ä–≤–µ—Ä –æ—Ñ–ª–∞–π–Ω"
    
    message = f"–û–Ω–æ–≤–ª–µ–Ω–æ: {update_time}\n{ip}\n| {online_status}\n| {players}\n| –ù—ñ–∫–Ω–µ–π–º–∏:{nicknames}"
    return message

async def periodic_job(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω –≥—Ä–∞–≤—Ü—ñ–≤"""
    await monitor.check_player_changes(context.bot)

async def telegram(request: Request) -> Response:
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram"""
    try:
        await application.update_queue.put(
            Update.de_json(data=await request.json(), bot=application.bot)
        )
        return Response()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return Response(status_code=500)

async def health(_: Request) -> PlainTextResponse:
    """Health check –¥–ª—è Render"""
    return PlainTextResponse(content="The bot is still running fine :)")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
starlette_app = Starlette(
    routes=[
        Route("/telegram", telegram, methods=["POST"]),
        Route("/healthcheck", health, methods=["GET"]),
    ]
)

async def main():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global application
    application = Application.builder().token(BOT_TOKEN).updater(None).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CallbackQueryHandler(button))
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
    await application.bot.set_webhook(url=f"{URL}/telegram", allowed_updates=Update.ALL_TYPES)
    
    # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –∑–∞–¥–∞—á–∞ (–∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥)
    job_queue = application.job_queue
    job_queue.run_repeating(periodic_job, interval=10, first=10)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    async with application:
        await application.start()
        await uvicorn.Server(
            config=uvicorn.Config(
                app=starlette_app,
                port=PORT,
                use_colors=False,
                host="0.0.0.0"  # Render –≤–∏–º–∞–≥–∞—î –ø—Ä–∏–≤‚Äô—è–∑–∫—É –¥–æ –≤—Å—ñ—Ö IP
            )
        ).serve()
        await application.stop()

if __name__ == "__main__":
    asyncio.run(main())
```
